setwd("/Users/ianbrennan/Documents/GitHub/Amphibolurinae")
source("/Users/ianbrennan/Documents/GitHub/Amphibolurinae/Scripts/shifts.to.simmap.l1ou.R")
library(l1ou)
source("/Users/ianbrennan/Documents/GitHub/Amphibolurinae/Scripts/shifts.to.simmap.l1ou.R")
load("Data/Amphibolurinae_Data.RData")
load("Data/Ancestral_Trait_Estimates.RData")
agam.tree <- agam3
# make sure the tree is ultrametric
agam.tree <- phytools::force.ultrametric(agam.tree)
# Set up data and run l1ou on all the trait dimensions
trait.data <- adjust_data(agam.tree, allLSR[,1:19])
## Run algorithm
full.em <- PhyloEM(phylo = trait.data$tree,
#Y_data = t(trait.data$Y[,c(1:6,8:16,19)]),
Y_data = t(trait.data$Y),
process = "scOU",                   ## scalar OU model
random.root = TRUE,                 ## Root is stationary (true model)
stationary.root = TRUE,
#independent = TRUE,
#alpha = alpha_grid,                 ## On a grid of alpha
nbr_alpha = 30,
K_max = 15,                         ## Maximal number of shifts
parallel_alpha = TRUE,              ## This can be set to TRUE for
Ncores = 6)                         ## parallel computations
library(PhylogeneticEM)
trait.data <- adjust_data(agam.tree, prcomp(allLSR[,1:19])$x[,1:6])
## Run algorithm
full.em <- PhyloEM(phylo = trait.data$tree,
#Y_data = t(trait.data$Y[,c(1:6,8:16,19)]),
Y_data = t(trait.data$Y),
process = "scOU",                   ## scalar OU model
random.root = TRUE,                 ## Root is stationary (true model)
stationary.root = TRUE,
#independent = TRUE,
#alpha = alpha_grid,                 ## On a grid of alpha
nbr_alpha = 30,
K_max = 15,                         ## Maximal number of shifts
parallel_alpha = TRUE,              ## This can be set to TRUE for
Ncores = 6)                         ## parallel computations
# plot the preferred result
plot(full.em)
# plot the model selection criterion
plot_criterion(full.em)
res.k9 <- params_process(full.em, K=9)
plot(full.em, params = res.k9)
# Set up data and run l1ou on all the trait dimensions
trait.data <- adjust_data(agam.tree, allLSR[,1:19])
## Run algorithm
full.em <- PhyloEM(phylo = trait.data$tree,
#Y_data = t(trait.data$Y[,c(1:6,8:16,19)]),
Y_data = t(trait.data$Y),
process = "scOU",                   ## scalar OU model
random.root = TRUE,                 ## Root is stationary (true model)
stationary.root = TRUE,
#independent = TRUE,
#alpha = alpha_grid,                 ## On a grid of alpha
nbr_alpha = 30,
K_max = 15,                         ## Maximal number of shifts
parallel_alpha = TRUE,              ## This can be set to TRUE for
Ncores = 6)                         ## parallel computations
colnames(allLSR)
# Set up data and run l1ou on all the trait dimensions
trait.data <- adjust_data(agam.tree, allLSR[,1:19])
## Run algorithm
full.em <- PhyloEM(phylo = trait.data$tree,
#Y_data = t(trait.data$Y[,c(1:6,8:16,19)]),
Y_data = t(trait.data$Y),
process = "scOU",                   ## scalar OU model
random.root = TRUE,                 ## Root is stationary (true model)
stationary.root = TRUE,
#independent = TRUE,
#alpha = alpha_grid,                 ## On a grid of alpha
nbr_alpha = 30,
K_max = 10,                         ## Maximal number of shifts
parallel_alpha = TRUE,              ## This can be set to TRUE for
Ncores = 6)                         ## parallel computations
colnames(allLSR)
# Set up data and run l1ou on all the trait dimensions
trait.data <- adjust_data(agam.tree, allLSR[,c(1:6,8:16,19)]) # c(1:6,8:16,19)
## Run algorithm
full.em <- PhyloEM(phylo = trait.data$tree,
#Y_data = t(trait.data$Y[,c(1:6,8:16,19)]),
Y_data = t(trait.data$Y),
process = "scOU",                   ## scalar OU model
random.root = TRUE,                 ## Root is stationary (true model)
stationary.root = TRUE,
#independent = TRUE,
#alpha = alpha_grid,                 ## On a grid of alpha
nbr_alpha = 30,
K_max = 15,                         ## Maximal number of shifts
parallel_alpha = TRUE,              ## This can be set to TRUE for
Ncores = 6)                         ## parallel computations
# plot the preferred result
plot(full.em)
# plot the preferred result
plot(full.em)
# plot the model selection criterion
plot_criterion(full.em)
atree <- read.tree("/Users/ianbrennan/Documents/GitHub/Amphibolurinae/Trees/Amphibolurinae_MCMCTree.tre")
atree$tip.label <- sapply(atree$tip.label, function(x) strex::str_before_nth(x,"_",2))
atree$tio
atree$tip
write.tree(atree, file="/Users/ianbrennan/Documents/GitHub/Amphibolurinae/Trees/Amphibolurinae_MCMCTree.tre")
setwd("/Users/ianbrennan/Documents/GitHub/Amphibolurinae")
t1 <- read.tree("Trees/Amphibolurinae_MCMCTree.tre")
t1 <- ladderize(t1)
t1$edge.length <- t1$edge.length*100
plot(t1, cex=0.3); nodelabels
t1 <- drop.tip(t1, c("Sphenodon_punctatus", "Phrynocephalus_putjatai", "Diporiphora_linga2", "Pogona_minor_minor2", "Moloch_sp."))
plot(t1, cex=0.4); axisPhylo()
t2 <- bind.tip(tree = t1,
tip.label = "Hypsilurus_godeffroyi",
where = getMRCA(t1, c("Hypsilurus_modestus", "Hypsilurus_magnus")),
#where = 126,
position = 20.35 - (max(nodeHeights(t1)) - nodeheight(t1, getMRCA(t1, c("Hypsilurus_modestus", "Hypsilurus_magnus")))),
edge.length = 20.35)
plot(t2, cex=0.3); axisPhylo()
t3 <- bind.tip(tree = t2,
tip.label = "Hypsilurus_papuensis",
where = which(t2$tip.label=="Hypsilurus_magnus"),
position = 8.78,
edge.length = 8.78)
plot(t3, cex=0.3); axisPhylo()
t4 <- bind.tip(tree = t3,
tip.label = "Hypsilurus_nigrigularis",
where = which(t3$tip.label=="Hypsilurus_magnus"),
position = 7.01,
edge.length = 7.01)
plot(t4, cex=0.3); axisPhylo()
t4 <- ladderize(t4)
t4 <- ladderize(t4, right=F)
plot(t4, cex=0.3); axisPhylo()
write.tree(t4, "/Users/ianbrennan/Documents/GitHub/Amphibolurinae/Trees/Amphibolurinae_forR.tre")
all <- read.tree("/Users/ianbrennan/Documents/GitHub/Amphibolurinae/Trees/Amphibolurinae_MCMCTree.tre")
all$tip.label <- sapply(all$tip.label, function(x) strex::str_after_first(x,"_"))
all <- drop.tip(all, c("Moloch_sp.","Diporiphora_linga2","Pogona_minor.minor2",
"Sphenodon_punctatus","Phrynocephalus_putjatai"))
all$edge.length <- all$edge.length*100
agam.tree2 <- ladderize(all)
arc_height<-0.4
h<-max(nodeHeights(agam.tree2))
plotTree2(agam.tree2,type="arc",lwd=1,fsize=0.45,ftype="i",
arc_height=arc_height,ylim=c(-0.1*h,1.1*(1+arc_height)*h))
all <- read.tree("/Users/ianbrennan/Documents/GitHub/Amphibolurinae/Trees/Amphibolurinae_MCMCTree.tre")
#all$tip.label <- sapply(all$tip.label, function(x) strex::str_after_first(x,"_"))
all <- drop.tip(all, c("Moloch_sp.","Diporiphora_linga2","Pogona_minor.minor2",
"Sphenodon_punctatus","Phrynocephalus_putjatai"))
all$edge.length <- all$edge.length*100
agam.tree2 <- ladderize(all)
arc_height<-0.4
h<-max(nodeHeights(agam.tree2))
plotTree2(agam.tree2,type="arc",lwd=1,fsize=0.45,ftype="i",
arc_height=arc_height,ylim=c(-0.1*h,1.1*(1+arc_height)*h))
labs<-seq(0,h,by=5)
a1<-axis(1,pos=-0.02*h,at=h-labs+arc_height*h,
labels=labs,cex.axis=0.8,lwd=2,lend=2)
text(mean(a1),-0.23*h,"million years bp",font=3)
a2<-axis(1,pos=-0.02*h,at=-h+labs-arc_height*h,
labels=labs,cex.axis=0.8,lwd=2,lend=2)
text(mean(a2),-0.23*h,"million years bp",font=3)
draw.arc(0,0,radius=h-labs[2:length(labs)]+arc_height*h,
angle1=,angle2=pi,col=make.transparent("blue",0.4),
lty="dotted")
all <- read.tree("/Users/ianbrennan/Documents/GitHub/Amphibolurinae/Trees/Amphibolurinae_MCMCTree.tre")
#all$tip.label <- sapply(all$tip.label, function(x) strex::str_after_first(x,"_"))
all <- drop.tip(all, c("Moloch_sp.","Diporiphora_linga2","Pogona_minor_minor2",
"Sphenodon_punctatus","Phrynocephalus_putjatai"))
all$edge.length <- all$edge.length*100
agam.tree2 <- ladderize(all)
arc_height<-0.4
h<-max(nodeHeights(agam.tree2))
plotTree2(agam.tree2,type="arc",lwd=1,fsize=0.45,ftype="i",
arc_height=arc_height,ylim=c(-0.1*h,1.1*(1+arc_height)*h))
labs<-seq(0,h,by=5)
a1<-axis(1,pos=-0.02*h,at=h-labs+arc_height*h,
labels=labs,cex.axis=0.8,lwd=2,lend=2)
text(mean(a1),-0.23*h,"million years bp",font=3)
a2<-axis(1,pos=-0.02*h,at=-h+labs-arc_height*h,
labels=labs,cex.axis=0.8,lwd=2,lend=2)
text(mean(a2),-0.23*h,"million years bp",font=3)
setwd("/Users/ianbrennan/Documents/GitHub/Amphibolurinae")
library(l1ou)
source("/Users/ianbrennan/Documents/GitHub/Amphibolurinae/Scripts/shifts.to.simmap.l1ou.R")
load("Data/Amphibolurinae_Data.RData")
load("Data/Ancestral_Trait_Estimates.RData")
setdiff(agam.tree$tip.label, all$tip.label)
setdiff(all$tip.label, agam.tree)
write.tree(agam.tree, file="/Users/ianbrennan/Documents/GitHub/Amphibolurinae/Trees/Amphibolurinae_forR_OLD.tre")
setdiff(agam.tree$tip.label, all$tip.label)
agam.tree2 <- read.tree("/Users/ianbrennan/Documents/GitHub/Amphibolurinae/Trees/Amphibolurinae_forR.tre")
setdiff(agam.tree$tip.label, agam.tree2$tip.label)
setdiff(agam.tree2$tip.label, agam.tree$tip.label)
agam.tree2 <- drop.tip(agam.tree2, setdiff(agam.tree2$tip.label, agam.tree$tip.label))
setdiff(agam.tree2$tip.label, rownames(allLSR))
setdiff(rownames(allLSR), agam.tree2$tip.label)
write.tree(agam.tree2, file="/Users/ianbrennan/Documents/GitHub/Amphibolurinae/Trees/Amphibolurinae_forR.tre")
agam.tree <- agam.tree2
# make sure the tree is ultrametric
agam.tree <- phytools::force.ultrametric(agam.tree)
trait.data <- adjust_data(agam.tree, prcomp(allLSR[,1:19])$x[,1:6])
l1ou.fit <- estimate_shift_configuration(trait.data$tree, trait.data$Y,
nCores = 8, quietly = F, criterion = "pBIC",
max.nShifts = 12)
# Extract the shift config and plot it
trait.shift <- shifts.to.simmap.l1ou(l1ou.fit)
plotColorSimmap(trait.shift)
# Extract the shift config and plot it
trait.shift <- shifts.to.simmap.l1ou(l1ou.fit)
plotColorSimmap(trait.shift)
# Extract the shift config and plot it
trait.shift <- shifts.to.simmap.l1ou(l1ou.fit)
plotColorSimmap(trait.shift)
# Set up data and run l1ou on a subset of the trait dimensions
l1ou.fit.limit <- estimate_shift_configuration(trait.data$tree, trait.data$Y[,c(1:6,8:16,19)],
nCores = 8, quietly = F, criterion = "pBIC",
max.nShifts = 12)
# Set up data and run l1ou on all the trait dimensions
trait.data <- adjust_data(agam.tree, allLSR[,1:19]) # c(1:6,8:16,19)
# Set up data and run l1ou on a subset of the trait dimensions
l1ou.fit.limit <- estimate_shift_configuration(trait.data$tree, trait.data$Y[,c(1:6,8:16,19)],
nCores = 8, quietly = F, criterion = "pBIC",
max.nShifts = 12)
# Extract the shift config and plot it
trait.shift.limit <- shifts.to.simmap.l1ou(l1ou.fit.limit)
plotColorSimmap(trait.shift.limit)
# Extract the shift config and plot it
trait.shift.limit <- shifts.to.simmap.l1ou(l1ou.fit.limit)
plotColorSimmap(trait.shift.limit)
# Set up data and run l1ou on all the trait dimensions
trait.data <- adjust_data(agam.tree, allLSR[,c(1:6,8:16,19)) # 1:19
# Set up data and run l1ou on all the trait dimensions
trait.data <- adjust_data(agam.tree, allLSR[,c(1:6,8:16,19)]) # 1:19
## Run algorithm
full.em <- PhyloEM(phylo = trait.data$tree,
#Y_data = t(trait.data$Y[,c(1:6,8:16,19)]),
Y_data = t(trait.data$Y),
process = "scOU",                   ## scalar OU model
random.root = TRUE,                 ## Root is stationary (true model)
stationary.root = TRUE,
#independent = TRUE,
#alpha = alpha_grid,                 ## On a grid of alpha
nbr_alpha = 30,
K_max = 15,                         ## Maximal number of shifts
parallel_alpha = TRUE,              ## This can be set to TRUE for
Ncores = 6)                         ## parallel computations
# plot the preferred result
plot(full.em)
# isolate the results for k=4 & k=8 & k=9 & k=10 & k=...
res.k4 <- params_process(full.em, K=4)
res.k8 <- params_process(full.em, K=8)
res.k9 <- params_process(full.em, K=9)
res.k10 <- params_process(full.em, K=10)
# plot the preferred result
plot(full.em, params = res.k4)
plot(full.em, params = res.k8)
plot(full.em, params = res.k9)
plot(full.em, params = res.k10)
# we can also plot equivalent shifts for any number
plot(equivalent_shifts(trait.data$tree, res.k8),
show_shifts_values = FALSE, shifts_cex = 0.5)
# compare the loglikelihoods
log_likelihood(x=res.k4, Y_data=t(trait.data$Y[,c(1:6,8:16,19)]), phylo=trait.data$tree)
# plot the model selection criterion
plot_criterion(full.em)
# plot the model selection criterion
plot_criterion(full.em)
trait.data <- adjust_data(agam.tree, prcomp(allLSR[,1:19])$x[,1:6])
## Run algorithm
full.em <- PhyloEM(phylo = trait.data$tree,
#Y_data = t(trait.data$Y[,c(1:6,8:16,19)]),
Y_data = t(trait.data$Y),
process = "scOU",                   ## scalar OU model
random.root = TRUE,                 ## Root is stationary (true model)
stationary.root = TRUE,
#independent = TRUE,
#alpha = alpha_grid,                 ## On a grid of alpha
nbr_alpha = 30,
K_max = 15,                         ## Maximal number of shifts
parallel_alpha = TRUE,              ## This can be set to TRUE for
Ncores = 6)                         ## parallel computations
# plot the preferred result
plot(full.em)
# Set up data and run l1ou on all the trait dimensions
trait.data <- adjust_data(agam.tree, allLSR[,c(1:6,8:16,19)]) # 1:19
## Run algorithm
full.em <- PhyloEM(phylo = trait.data$tree,
#Y_data = t(trait.data$Y[,c(1:6,8:16,19)]),
Y_data = t(trait.data$Y),
process = "scOU",                   ## scalar OU model
random.root = TRUE,                 ## Root is stationary (true model)
stationary.root = TRUE,
#independent = TRUE,
#alpha = alpha_grid,                 ## On a grid of alpha
nbr_alpha = 30,
K_max = 15,                         ## Maximal number of shifts
parallel_alpha = TRUE,              ## This can be set to TRUE for
Ncores = 6)                         ## parallel computations
# plot the model selection criterion
plot_criterion(full.em)
# plot the preferred result
plot(full.em)
res.k6 <- params_process(full.em, K=6)
plot(res.k6)
plot(full.em, params=res.k6)
res.k5 <- params_process(full.em, K=5)
plot(full.em, params=res.k5)
# set the working directory to the GitHub repo
setwd("/Users/ianbrennan/Documents/GitHub/Amphibolurinae")
# Load necessary packages
library(phytools)
library(randomForest)
library(ggRandomForests)
library(randomForestExplainer)
#
source("Scripts/innovate_elaborate.R")
# read in the ecology data
eco.df <- read.csv("Data/Amphibolurinae_Ecology.csv", h=T)
eco.df <- dplyr::select(eco.df, Genus_species, Ecology, rpt, rpo, rppc, k5, k12, opt6)
# bind the ecology data to the trait shape data
rfdata <- dplyr::full_join(allLSR, eco.df)
rownames(rfdata) <- rfdata$Genus_species
colnames(rdata.eco)
head(rfdata)
#rfdata.reg <- rfdata[,c(1:19,23)] # rpot
#rfdata.reg <- rfdata[,c(1:19,24)] # rpo
#rfdata.reg <- rfdata[,c(1:19,25)] # rpo
#rfdata.reg <- rfdata[,c(1:19,26)] # k5
#rfdata.reg <- rfdata[,c(1:19,27)] # k12
rfdata.reg <- rfdata[,c(1:19,28)] # k12
head(refdata.reg)
head(rfdata.reg)
colnames(rfdata.reg)[[20]] <- "Regime"
rfdata.reg$Regime <- as.factor(rfdata.reg$Regime)
# set a seed to make this reproducible
set.seed(2024)
# run the RandomForest and visualize it
# forest <- randomForest(Ecology ~ ., data = rfdata.eco, ntree = 10000, localImp = TRUE)
forest <- randomForest(Regime ~ ., data = rfdata.reg, ntree = 10000, localImp = TRUE)
plot(forest)
forest.min.depth <- min_depth_distribution(forest)
rf.votes <- data.frame(forest$votes)
rf.votes$Ecology <- rfdata$Ecology
rf.votes$Regime <- rfdata.reg$Regime
rf.predictions <- predict(forest, ancestors, type="prob")
rfp <- predict(forest, ancestors, type="prob")
rownames(rfp) <- 120:(120+(nrow(rfp)-1))
eco <- setNames(rfdata$Ecology, rownames(rfdata))
reg <- setNames(rfdata.reg$Regime, rownames(rfdata.reg))
# we'll use the phytools architecture to plot the RF likelihoods for ancestral states
#fit.STP.full <- fitMk(agam.tree, reg, model=STP.full, pi="fitzjohn")
fit.ER <- fitMk(agam.tree, reg, model="ER", pi="fitzjohn")
# extract the marginal ancestral state estimates
anc <- ancr(fit.ER, type="marginal")
# replace the ancr ace matrix with our RF predictions
anc$ace <- rfp
# Plot the marginal ancestral states on the phylogeny
# set colors
#cols <- setNames(c(RColorBrewer::brewer.pal(9,"Spectral")),
c1 <- colorRampPalette(RColorBrewer::brewer.pal(9,"Spectral"))
cols <- c1(length(unique(reg)))
#cols <- setNames(c(RColorBrewer::brewer.pal(6,"Spectral")[c(1,2,3,5,6)]),
#cols <- setNames(c(hcl.colors(8)[c(1,3,5,7)]),levels(reg))
node.cex<-apply(anc$ace,1,
function(x) if(any(x>0.5)) 0.3 else 0.6)
# plot tree
plot(anc,
args.plotTree=list(type="arc", arc_height=0.5, fsize=0.5, offset=3, color="grey"),
#     args.plotTree=list(type="fan",part=0.75, color="grey", fsize=0.5,offset=3),
args.nodelabels=list(cex=node.cex,piecol=cols),
args.tiplabels=list(cex=0.2,piecol=cols),
legend=FALSE)
# plot tree
plot(anc,
args.plotTree=list(type="arc", arc_height=0.5, fsize=0.5, offset=3, color="grey"),
#     args.plotTree=list(type="fan",part=0.75, color="grey", fsize=0.5,offset=3),
args.nodelabels=list(cex=node.cex,piecol=cols),
args.tiplabels=list(cex=0.2,piecol=cols),
legend=FALSE)
# plot legend
legend(x=-70, y=0,
levels(reg),pch=16,col=cols,
horiz=T,cex=0.8,bty="n",pt.cex=2,
x.intersp=0.5)
# read in the ecology data
eco.df <- read.csv("Data/Amphibolurinae_Ecology.csv", h=T)
eco.df <- dplyr::select(eco.df, Genus_species, Ecology, rpt, rpo, rppc, opt5, k12, opt6)
# bind the ecology data to the trait shape data
rfdata <- dplyr::full_join(allLSR, eco.df)
rownames(rfdata) <- rfdata$Genus_species
#rfdata.reg <- rfdata[,c(1:19,23)] # rpot
#rfdata.reg <- rfdata[,c(1:19,24)] # rpo
#rfdata.reg <- rfdata[,c(1:19,25)] # rpo
rfdata.reg <- rfdata[,c(1:19,26)] # k5
#rfdata.reg <- rfdata[,c(1:19,27)] # k12
#rfdata.reg <- rfdata[,c(1:19,28)] # k12
colnames(rfdata.reg)[[20]] <- "Regime"
rfdata.reg$Regime <- as.factor(rfdata.reg$Regime)
head(rfdata.reg)
# set a seed to make this reproducible
set.seed(2024)
# run the RandomForest and visualize it
# forest <- randomForest(Ecology ~ ., data = rfdata.eco, ntree = 10000, localImp = TRUE)
forest <- randomForest(Regime ~ ., data = rfdata.reg, ntree = 10000, localImp = TRUE)
plot(forest)
rf.votes <- data.frame(forest$votes)
rf.votes$Ecology <- rfdata$Ecology
rf.votes$Regime <- rfdata.reg$Regime
rf.predictions <- predict(forest, ancestors, type="prob")
rfp <- predict(forest, ancestors, type="prob")
rownames(rfp) <- 120:(120+(nrow(rfp)-1))
eco <- setNames(rfdata$Ecology, rownames(rfdata))
reg <- setNames(rfdata.reg$Regime, rownames(rfdata.reg))
# we'll use the phytools architecture to plot the RF likelihoods for ancestral states
#fit.STP.full <- fitMk(agam.tree, reg, model=STP.full, pi="fitzjohn")
fit.ER <- fitMk(agam.tree, reg, model="ER", pi="fitzjohn")
# extract the marginal ancestral state estimates
anc <- ancr(fit.ER, type="marginal")
# replace the ancr ace matrix with our RF predictions
anc$ace <- rfp
# Plot the marginal ancestral states on the phylogeny
# set colors
#cols <- setNames(c(RColorBrewer::brewer.pal(9,"Spectral")),
c1 <- colorRampPalette(RColorBrewer::brewer.pal(9,"Spectral"))
cols <- c1(length(unique(reg)))
#cols <- setNames(c(RColorBrewer::brewer.pal(6,"Spectral")[c(1,2,3,5,6)]),
#cols <- setNames(c(hcl.colors(8)[c(1,3,5,7)]),levels(reg))
node.cex<-apply(anc$ace,1,
function(x) if(any(x>0.5)) 0.3 else 0.6)
# plot tree
plot(anc,
args.plotTree=list(type="arc", arc_height=0.5, fsize=0.5, offset=3, color="grey"),
#     args.plotTree=list(type="fan",part=0.75, color="grey", fsize=0.5,offset=3),
args.nodelabels=list(cex=node.cex,piecol=cols),
args.tiplabels=list(cex=0.2,piecol=cols),
legend=FALSE)
head(rfp)
# read in the ecology data
eco.df <- read.csv("Data/Amphibolurinae_Ecology.csv", h=T)
eco.df <- dplyr::select(eco.df, Genus_species, Ecology, rpt, rpo, rppc, opt5, k12, opt6, opt11)
# bind the ecology data to the trait shape data
rfdata <- dplyr::full_join(allLSR, eco.df)
rownames(rfdata) <- rfdata$Genus_species
#rfdata.reg <- rfdata[,c(1:19,23)] # rpot
#rfdata.reg <- rfdata[,c(1:19,24)] # rpo
#rfdata.reg <- rfdata[,c(1:19,25)] # rpo
#rfdata.reg <- rfdata[,c(1:19,26)] # k5
#rfdata.reg <- rfdata[,c(1:19,27)] # k12
#rfdata.reg <- rfdata[,c(1:19,28)] # opt6
rfdata.reg <- rfdata[,c(1:19,29)] # opt11
colnames(rfdata.reg)[[20]] <- "Regime"
rfdata.reg$Regime <- as.factor(rfdata.reg$Regime)
# set a seed to make this reproducible
set.seed(2024)
# run the RandomForest and visualize it
# forest <- randomForest(Ecology ~ ., data = rfdata.eco, ntree = 10000, localImp = TRUE)
forest <- randomForest(Regime ~ ., data = rfdata.reg, ntree = 10000, localImp = TRUE)
plot(forest)
plot(forest)
rf.votes <- data.frame(forest$votes)
rf.votes$Ecology <- rfdata$Ecology
rf.votes$Regime <- rfdata.reg$Regime
rf.predictions <- predict(forest, ancestors, type="prob")
rfp <- predict(forest, ancestors, type="prob")
rownames(rfp) <- 120:(120+(nrow(rfp)-1))
eco <- setNames(rfdata$Ecology, rownames(rfdata))
reg <- setNames(rfdata.reg$Regime, rownames(rfdata.reg))
# we'll use the phytools architecture to plot the RF likelihoods for ancestral states
#fit.STP.full <- fitMk(agam.tree, reg, model=STP.full, pi="fitzjohn")
fit.ER <- fitMk(agam.tree, reg, model="ER", pi="fitzjohn")
# extract the marginal ancestral state estimates
anc <- ancr(fit.ER, type="marginal")
# replace the ancr ace matrix with our RF predictions
anc$ace <- rfp
# Plot the marginal ancestral states on the phylogeny
# set colors
#cols <- setNames(c(RColorBrewer::brewer.pal(9,"Spectral")),
c1 <- colorRampPalette(RColorBrewer::brewer.pal(9,"Spectral"))
cols <- c1(length(unique(reg)))
#cols <- setNames(c(RColorBrewer::brewer.pal(6,"Spectral")[c(1,2,3,5,6)]),
#cols <- setNames(c(hcl.colors(8)[c(1,3,5,7)]),levels(reg))
node.cex<-apply(anc$ace,1,
function(x) if(any(x>0.5)) 0.3 else 0.6)
# plot tree
plot(anc,
args.plotTree=list(type="arc", arc_height=0.5, fsize=0.5, offset=3, color="grey"),
#     args.plotTree=list(type="fan",part=0.75, color="grey", fsize=0.5,offset=3),
args.nodelabels=list(cex=node.cex,piecol=cols),
args.tiplabels=list(cex=0.2,piecol=cols),
legend=FALSE)
# plot legend
legend(x=-70, y=0,
levels(reg),pch=16,col=cols,
horiz=T,cex=0.8,bty="n",pt.cex=2,
x.intersp=0.5)
head(rfp)
etree <- read.tree("/Users/ianbrennan/Desktop/Elapidae_AusARG/V4/elapid_v4_AHE_ASTRAL4_newick.tre")
getMRCA(etree, c("Elapsoidea_loveridgei_FMNH251327","Cacophis_krefftii_QM_J77608"))
etree$tip.label
getMRCA(etree, c("Elapidae_Elapsoidea_loveridgei_FMNH251327","Vermicella_snelli_R156329"))
etree2 <- extract.clade(etree, getMRCA(etree, c("Elapidae_Elapsoidea_loveridgei_FMNH251327","Vermicella_snelli_R156329")))
write.tree(etree2, file="/Users/ianbrennan/Desktop/Elapidae_AusARG/V4/elapid_v4_AHE_ASTRAL4_newick2.tre")
plotTree(agam.tree, type="fan")
plotTree(agam.tree, type="fan", angle=180)
plot(agam.tree, direction="leftwards")
plot(agam.tree, direction="leftwards", type="fan")
plot(agam.tree, direction="rightwards", type="fan")
gs <- read.csv("/Users/ianbrennan/Desktop/Gecko_Shape.csv")
head(gs)
1e10
exp(gs$SVL)
head(gs)
mdata
